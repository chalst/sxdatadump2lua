-- archive-site.lua - read-ddump.lua application to build static pages
 
-- Copyright:	(C) Charles Stewart, August 2011 and later
-- License:	GPL3
-- Hosted:	https://github.com/chalst/sxdatadump2lua
-- Project:	http://www.advogato.org/proj/sxdatadump2lua/

-- This code should be run after the TLTs as defined in read-ddump.lua
-- have already been defined.  All generated content comes from them.

-- FIX! The code should generate files in a directory passed as an argument

-- -- Walk tables to make HTML pages

tag_key = function () return "tag_key" end -- Used to store tag in table

function walk (writer, htable)
	-- MAYBE FIX! Is checking params worthwhile?
	local tag=htable[tag_key]
	local attr=" "
	for key,val in pairs(htable) do
		if type(key)=="string" then
		  attr = attr .. key .. "=" .. q(val) .. " "
		end
	end
	if htable[1]==nil then
	  writer ("<", tag, attr, "/>")
	else
	  writer ("<", tag, attr, ">")
	  local line_break=false
	  for i,ival in ipairs (htable) do
	  	if line_break then writer (nl) else line_break=true end
		if type(ival)=="table" then
			walk (writer, ival)
		else
			writer (tostring(ival))
		end
	  end
	  writer ("</", tag, ">")
	end
end		



header_tags = {}
for i=1,6 do header_tags[i] = "h" .. tostring(i) end

regular_tags = { "a", "html", "head", "body", "meta",
	   	"title", "link", 
		"p", "div", "blockquote", "br",
		"ul", "ol", "li",
		"dl", "dt", "dd",
		"span", "sup", "sub",
		"code", "cite",
		"em", "ins", "del",
		"b", "i", "u", "s" }

verbatim_tags = { "script", "pre" }

do
	local function tag_rec_fn (tag) 
	end
	local tag_verb_fn = tag_rec_fn -- MAYBE FIX! Ensure lines are strings and tag verbatim
	local function mkreg (entity)
	      	_G[entity .. "_"] = function (htable) 
			     	    	log(entity)
					htable[tag_key]=entity
					return htable
				    end
	end
	local function mkverb (entity)
	      	_G[entity .. "_"] = function (htable)
					htable[tag_key]=entity
					return htable
				    end
	end
	map (mkreg, header_tags)
	map (mkreg, regular_tags)
	map (mkverb, verbatim_tags)
end	
       
-- -- Generate html fragments

function link2user (n)
	user = users[n]
	if user then
		link_text = "[" .. user.DisplayName .. "]"
	else
		link_text = "[uid=" .. tostring (n) .. "]"
	end
	link_href = "users.html#" .. tostring(n)
	return a_ { href=link_href, link_text }
end



-- -- QUESTION LIST


qlist = {}
for i,ival in ipairs (questions) do
	istr = tostring(ival.Id)
	qlist[1+#qlist] = li_ {}
	qlist[1+#qlist] = "(" .. istr .. ") "
	qlist[1+#qlist] = a_ {href="./qn-" .. istr .. ".html", ival.Title}
	qlist[1+#qlist] = link2user (ival.OwnerUserId)
end

page = html_ {	head_ {	meta_ {author=q("Autogenerated content from Stack Exchange data dump")},
			title_ {"Question list for " .. site.title} },
		body_ { ul_ (qlist) }}

do
	local qfile="questions.html"
	local fd = assert(io.open(qfile, "w"))
	local write_fd = function (...) fd:write (...) end
	log( type (page))
	walk(write_fd, page)
	fd:close()
end

-- -- USER LIST

ulist = {}
for i,ival in pairs (users) do
    	if not(users[i].DisplayName) then break end
	istr = tostring(ival.Id)
	ulist[1+#ulist] = li_ {}
	ulist[1+#ulist] = ival.DisplayName .. " (uid=" .. istr .. ") "
	local url=ival.WebsiteUrl
	if url then
	  ulist[1+#ulist] = a_ {href=url, url}
	end
end

page = html_ {	head_ {	meta_ {author=q("Autogenerated content from Stack Exchange data dump")},
			title_ {"List of users of " .. site.title} },
		body_ { ul_ (ulist) }}

do
	local ufile="users.html"
	local fd = assert(io.open(ufile, "w"))
	local write_fd = function (...) fd:write (...) end
	log (type (page))
	walk(write_fd, page)
	fd:close()
end

-- -- QUESTION PAGES

function make_qn_page (n)
	qn = questions[n]
	header= head_ {	meta_ {author=q("Autogenerated content from Stack Exchange data dump")},
			title_ {qn.Title} }
	alist = {} -- Answer list
	for i,ival in ipairs(qn.children) do
		alist [1+#alist] = li_ {}
		alist [1+#alist] = tostring(ival.Id) .. ". " .. ival.Body .. " "
		alist [1+#alist] = link2user(ival.OwnerUserId)
	end	
	page = html_ { header,
	       	       body_ {  h1_ {qn.Title},
				p_ {}, qn.Body,
				h2_ {"Answers"},
				ul_ (alist) }}
	return page
end			


for i,ival in ipairs (questions) do
	local qfile="qn-" .. tostring(ival.Id) .. ".html"
	local fd = assert(io.open(qfile, "w"))
	local write_fd = function (...) fd:write (...) end
	walk (write_fd, make_qn_page(i)) 
	fd:close()
end

	